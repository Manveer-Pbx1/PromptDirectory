name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  MONGODB_URI: mongodb://localhost:27017
  MONGODB_DB: promptDirectory_test

jobs:
  test:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        cd API/promptDirectory
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 black isort

    - name: 🎨 Check Code Formatting (Black)
      run: |
        cd API/promptDirectory
        black --check --diff .
      continue-on-error: true

    - name: 📋 Check Import Sorting (isort)
      run: |
        cd API/API/promptDirectory
        isort --check-only --diff .
      continue-on-error: true

    - name: 🔍 Lint Code (Flake8)
      run: |
        cd API/API/promptDirectory
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: 📋 Validate OpenAPI Schema
      run: |
        pip install openapi-spec-validator
        openapi-spec-validator openapi.yaml
      continue-on-error: true

    - name: 🧪 Run Django Tests
      env:
        MONGO_URI: ${{ env.MONGODB_URI }}
        MONGO_DB: ${{ env.MONGODB_DB }}
      run: |
        cd API  /promptDirectory
        python manage.py test --verbosity=2

    - name: 📊 Run Tests with Coverage
      env:
        MONGO_URI: ${{ env.MONGODB_URI }}
        MONGO_DB: ${{ env.MONGODB_DB }}
      run: |
        cd  API/API/promptDirectory
        pytest --cov=.  --cov-report=term

    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./ API/API/promptDirectory/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: 🔒 Security Checks
    runs-on: ubuntu-latest
    needs: test 

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🛡️ Security Check (Safety)
      run: |
        pip install safety
        cd  API/API/promptDirectory
        safety check -r requirements.txt
      continue-on-error: true

    - name: 🔍 Security Scan (Bandit)
      run: |
        pip install bandit
        cd  API/API/promptDirectory
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true

  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security] 
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: github.event_name != 'pull_request'

    - name: 🐳 Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./API/API/promptDirectory
        file: ./API/API/promptDirectory/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/prompt-directory:latest
          ${{ secrets.DOCKER_USERNAME }}/prompt-directory:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: 🚀 Deploy Application
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production 

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Deploying to production..."
        echo "🐳 Docker image: ${{ secrets.DOCKER_USERNAME }}/prompt-directory:${{ github.sha }}"
        echo "✅ Deployment completed!"
        # Add your actual deployment commands here
        # Examples:
        # - kubectl apply -f k8s/
        # - docker-compose up -d
        # - ansible-playbook deploy.yml
        # - aws ecs update-service
        # - heroku releases:create

    - name: 🏥 Health Check
      run: |
        echo "🏥 Running health checks..."
        # Add health check commands
        # curl -f http://your-app-url/health || exit 1
        echo "✅ Health checks passed!"

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test, security, build, deploy]
    if: always() 

    steps:
    - name: 📢 Notify Success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ All checks passed! Ready for deployment."
        # Add notification logic (Slack, Discord, Email, etc.)

    - name: 📢 Notify Failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        # Add failure notification logic
